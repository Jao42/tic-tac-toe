/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/script.js":
/*!***********************!*\
  !*** ./src/script.js ***!
  \***********************/
/***/ (() => {

eval("const body = document.querySelector('body');\nconst gameTable = document.querySelector('.game-table');\nconst initialScreen = document.querySelector('.initial-screen');\nconst results = document.querySelector('.results');\nconst humanButton = document.querySelector('.human-button')\nconst machineButton = document.querySelector('.machine-button')\nconst modeButtons = [humanButton, machineButton];\nlet isMachineGame;\n\nfunction createGameTable() {\n  let quadrant;\n\n  for(let i = 1; i <= 9; i++) {\n    quadrant = document.createElement('div');\n    gameTable.appendChild(quadrant);\n  }\n  gameTable.style.backgroundColor = '#000';\n}\n\n\nfunction createEndGameModal() {\n  let modalDiv = document.createElement('div');\n  modalDiv.classList.add('modal');\n  modalDiv.classList.add('end-game-modal');\n\n  let contentModalDiv = document.createElement('div');\n  contentModalDiv.classList.add('modal-content');\n\n  let titleModalDiv = document.createElement('div');\n  titleModalDiv.classList.add('modal-title');\n  titleModalDiv.classList.add('end-game-title');\n\n  let buttonsModalDiv = document.createElement('div');\n  buttonsModalDiv.classList.add('modal-buttons');\n  buttonsModalDiv.classList.add('end-game-buttons');\n  \n  \n  let buttonModal = document.createElement('div');\n  buttonModal.classList.add('modal-button');\n  buttonModal.textContent = 'Continue';\n\n  contentModalDiv.appendChild(titleModalDiv);\n  buttonsModalDiv.appendChild(buttonModal);\n  contentModalDiv.appendChild(titleModalDiv);\n  contentModalDiv.appendChild(buttonsModalDiv);\n  modalDiv.appendChild(contentModalDiv);\n\n  modalDiv.style.opacity = 0;\n  body.appendChild(modalDiv);\n  window.getComputedStyle(modalDiv).opacity;\n\n}\n\nfunction player(name, symbol, machine) {\n\n  return { name, symbol, machine };\n\n}\n\nfunction isWinner(playerArray) {\n  winnerPositions = [\n      [0, 1, 2], [0, 3, 6], \n      [0, 4, 8], [1, 4, 7], \n      [2, 4, 6], [2, 5, 8], \n      [3, 4, 5], [6, 7, 8]\n  ];\n\n  return winnerPositions.some((winnerPosition) => winnerPosition.every((i) => playerArray.includes(i))); \n\n}\n\nfunction gameStatusListener(arrayX, arrayY, arrayBoard) {\n\n  if (isWinner(arrayX)){\n    return 'Player 1 wins!';\n  }\n  else if (isWinner(arrayY)){\n    return 'Player 2 wins!';\n  }\n\n  else if (arrayBoard.every(Boolean)) {return 'A tie!';}\n\n  else return 0;\n\n}\nfunction displayResult(result) {\n\n  endGameModal.style.opacity = 1;\n  endGameModal.style.visibility = 'visible';\n  endGameTitle.innerHTML = `<h1>${result}</h1>`;\n  return 0;\n}\n\nfunction cleanScreen(quadrants) {\n\n  quadrants.forEach((quadrant) => {\n    quadrant.innerHTML = '';\n\n  })\n}\n\n\nfunction playerChoice(obj) {\n  if (obj.quadrante.firstElementChild) return 1;\n\n  let currentPlayer = obj.activeX ? obj.player1 : obj.player2;\n\n  let a = document.createElement('span');\n  a.textContent = currentPlayer.symbol;\n  obj.quadrante.appendChild(a);\n  \n  let arrayBoard = [...(obj.arrayBoard)]\n  let arrayX = [...(obj.arrayX)]\n  let arrayY = [...(obj.arrayY)]\n\n  arrayBoard[obj.index] = currentPlayer.symbol;\n  currentPlayer == obj.player1 ? arrayX.push(obj.index): arrayY.push(obj.index);\n\n  return [arrayX, arrayY, arrayBoard]\n}\n\nfunction resetDefault(result) {\n       \n  displayResult(result);\n  obj.arrayBoard = Array(9).fill();\n  obj.arrayX = [];\n  obj.arrayY = [];\n  obj.activeX = true;\n  return 0;\n}\n\nfunction changeCurrentPlayer() {\n\n  activeX = !activeX;\n  activeY = !activeY;\n}\n\nfunction randint(rangeLen) {\n  return Math.floor(Math.random() * rangeLen);\n\n}\n\n\ncreateGameTable()\nmodeButtons.forEach((e) => {\n  e.addEventListener('click', () => {\n  initialScreen.classList.add('modal-close');\n  if (e === machineButton) isMachineGame = true;\n  \n  })\n})\n\n\nconst gameBoard = {\n  quadrants: document.querySelectorAll('.game-table > div')\n\n}\n\nlet result = 0;\n\ncreateEndGameModal();\nconst endGameTitle = document.querySelector('.end-game-title');\nconst endGameModal = document.querySelector('.end-game-modal');\nconst endGameButton = document.querySelector('.end-game-buttons > div');\n\nendGameButton.addEventListener('click', () => {\n  \n  endGameModal.style.cssText = 'opacity: 0; visibility: hidden;';\n  cleanScreen(gameBoard.quadrants);\n\n})\n\nlet obj = {\n  quadrante: '',\n  index: '',\n  arrayX: [],\n  arrayY: [],\n  arrayBoard: Array(9).fill(),\n  activeX: true,\n  player1: player('player1', '⨯', false),\n  player2: player('player2', '◯', false)\n}\nlet play;\n\ngameBoard.quadrants.forEach((e, i) => {\n  e.addEventListener('click', () => {\n    if (!e.textContent) {\n      obj.quadrante = e\n      obj.index = i\n      play = playerChoice(obj);\n      obj.arrayX = play[0];\n      obj.arrayY = play[1];\n      obj.arrayBoard = play[2];\n      result = gameStatusListener(obj.arrayX, obj.arrayY, obj.arrayBoard);\n\n      if (result) resetDefault(result)\n      else\n        obj.activeX = !(obj.activeX);\n      if ((!result) && (isMachineGame)) {\n        do {\n          indexRandom = randint(9)\n        } while (obj.arrayY.includes(indexRandom) || obj.arrayX.includes(indexRandom)); \n\n        quadrantRandom = gameBoard.quadrants[indexRandom];\n        obj.quadrante = quadrantRandom\n        obj.index = indexRandom\n\n        play = playerChoice(obj);\n        obj.arrayX = play[0];\n        obj.arrayY = play[1];\n        obj.arrayBoard = play[2];\n\n        result = gameStatusListener(obj.arrayX, obj.arrayY, obj.arrayBoard);\n\n        if (result) resetDefault(result);\n        else \n          obj.activeX = !(obj.activeX);\n      }\n    }\n  })\n})\n\n\n//# sourceURL=webpack://tic-tac-toe/./src/script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/script.js"]();
/******/ 	
/******/ })()
;